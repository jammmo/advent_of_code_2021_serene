function part1(player1_start: Int64, player2_start: Int64) -> Int64 {
    var rolls = 0
    var turn = 1
    var next_roll = 1

    var positions = [player1_start, player2_start]
    var scores = [0, 0]

    var result = 0

    while True {
        var roll_total = 0
        for i = 0; 3 {
            set roll_total += next_roll
            set next_roll = (next_roll % 100) + 1
            set rolls += 1
        }

        set positions[turn - 1] = ((roll_total + positions[turn - 1] - 1) % 10) + 1
        set scores[turn - 1] += positions[turn - 1]

        const old_turn = turn
        if turn == 1 {
            set turn = 2
        } else {
            set turn = 1
        }

        if scores[old_turn - 1] >= 1000 {
            set result = scores[turn - 1] * rolls
            break
        }
    }

    return result
}

function part2(player1_start: Int64, player2_start: Int64) -> Int64 {
    var rolls = 0
    var turn = 1

    var positions: Vector of Array of Int64 = [[player1_start, player2_start]]
    var scores: Vector of Array of Int64 = [[0, 0]]
    var wins = [0, 0]

    while True {
        // This should triple the length of positions
        for roll_count = 1; 4 {
            var old_position = [0, 0]
            var new_positions: Vector of Array of Int64 = []

            while positions.length() > 0 {
                set old_position = positions.pop!()

                for rolled_number = 1; 4 {
                    if turn == 0 {
                        run new_positions.append!([((old_position[0] + rolled_number - 1) % 10) + 1, old_position[1]])
                    } else {
                        run new_positions.append!([old_position[0], ((old_position[1] + rolled_number - 1) % 10) + 1])
                    }
                }
            }

            while new_positions.length() > 0 {
                run positions.append!(new_positions.pop!())
            }

            set rolls += 1
        }

        var old_scores = scores
        set scores = [] as Vector of Array of Int64

        for i = 0; old_scores.length() {
            if turn == 0 {
                run scores.append!([old_scores[i][0] + positions[(i * 3) + 0][0], old_scores[i][1]])
                run scores.append!([old_scores[i][0] + positions[(i * 3) + 1][0], old_scores[i][1]])
                run scores.append!([old_scores[i][0] + positions[(i * 3) + 2][0], old_scores[i][1]])
            } else {
                run scores.append!([old_scores[i][0], old_scores[i][1] + positions[(i * 3) + 0][1]])
                run scores.append!([old_scores[i][0], old_scores[i][1] + positions[(i * 3) + 1][1]])
                run scores.append!([old_scores[i][0], old_scores[i][1] + positions[(i * 3) + 2][1]])
            }
        }

        // now scores and positions should be the same length
        if positions.length() != scores.length() {
            print "Error:"
            print positions
            print scores
            print rolls
            exit 1
        }

        var i = 0
        while i < scores.length() {
            if (turn == 0) and (scores[i][0] >= 21) {
                set wins[0] += 1
                run scores.delete!(i)
                run positions.delete!(i)
            } elseif (turn == 1) and (scores[i][1] >= 21) {
                set wins[0] += 1
                run scores.delete!(i)
                run positions.delete!(i)
            } else {
                set i += 1
            }
        }

        if turn == 1 {
            set turn = 2
        } else {
            set turn = 1
        }

        if positions.length() == 0 {
            break
        }
    }

    if wins[0] > wins[1] {
        return wins[0]
    } else {
        return wins[1]
    }
}

function main() {
    //print "Part One: ", part1(7, 8)

    print part2(4, 8)
}